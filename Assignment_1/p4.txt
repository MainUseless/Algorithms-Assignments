Recurrence formula = 2T(n/2) + cn

Divide the array in two halves recurssively


Using the master method :

a = 2
b = 2 
d of f(n) = 1

n^log(b)a = n^log(2)2  == n^d = n^1

Both sides are equal so complexity = n^d*log(b)n = (n^1)*log(2)n == n log(n)

//https://www.geeksforgeeks.org/maximum-subarray-sum-using-divide-and-conquer-algorithm/
//https://leetcode.com/problems/maximum-subarray/discuss/1520409/Very-Easy-Java-Solution.-Pure-DandC-implementation